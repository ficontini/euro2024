// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: matchservice/proto/ptypes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchesClient is the client API for Matches service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchesClient interface {
	GetUpcoming(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	GetLive(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	GetByTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*MatchResponse, error)
}

type matchesClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchesClient(cc grpc.ClientConnInterface) MatchesClient {
	return &matchesClient{cc}
}

func (c *matchesClient) GetUpcoming(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/Matches/GetUpcoming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchesClient) GetLive(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/Matches/GetLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchesClient) GetByTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/Matches/GetByTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchesServer is the server API for Matches service.
// All implementations must embed UnimplementedMatchesServer
// for forward compatibility
type MatchesServer interface {
	GetUpcoming(context.Context, *MatchRequest) (*MatchResponse, error)
	GetLive(context.Context, *MatchRequest) (*MatchResponse, error)
	GetByTeam(context.Context, *TeamRequest) (*MatchResponse, error)
	mustEmbedUnimplementedMatchesServer()
}

// UnimplementedMatchesServer must be embedded to have forward compatible implementations.
type UnimplementedMatchesServer struct {
}

func (UnimplementedMatchesServer) GetUpcoming(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcoming not implemented")
}
func (UnimplementedMatchesServer) GetLive(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLive not implemented")
}
func (UnimplementedMatchesServer) GetByTeam(context.Context, *TeamRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTeam not implemented")
}
func (UnimplementedMatchesServer) mustEmbedUnimplementedMatchesServer() {}

// UnsafeMatchesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchesServer will
// result in compilation errors.
type UnsafeMatchesServer interface {
	mustEmbedUnimplementedMatchesServer()
}

func RegisterMatchesServer(s grpc.ServiceRegistrar, srv MatchesServer) {
	s.RegisterService(&Matches_ServiceDesc, srv)
}

func _Matches_GetUpcoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServer).GetUpcoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Matches/GetUpcoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServer).GetUpcoming(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matches_GetLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServer).GetLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Matches/GetLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServer).GetLive(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matches_GetByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServer).GetByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Matches/GetByTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServer).GetByTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matches_ServiceDesc is the grpc.ServiceDesc for Matches service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matches_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Matches",
	HandlerType: (*MatchesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpcoming",
			Handler:    _Matches_GetUpcoming_Handler,
		},
		{
			MethodName: "GetLive",
			Handler:    _Matches_GetLive_Handler,
		},
		{
			MethodName: "GetByTeam",
			Handler:    _Matches_GetByTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchservice/proto/ptypes.proto",
}
